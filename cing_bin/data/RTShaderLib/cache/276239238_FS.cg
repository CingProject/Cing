//-----------------------------------------------------------------------------
// Program Type: Fragment shader
// Language: cg
// Created by Ogre RT Shader Generator. All rights reserved.
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
//                         PROGRAM DEPENDENCIES
//-----------------------------------------------------------------------------
#include "FFPLib_Common.cg"
#include "SGXLib_NormalMapLighting.cg"
#include "FFPLib_Texturing.cg"
#include "SGXLib_IntegratedPSSM.cg"

//-----------------------------------------------------------------------------
//                         GLOBAL PARAMETERS
//-----------------------------------------------------------------------------

sampler2D	gNormalMapSampler1 : register(s1);
float4	derived_ambient_light_colour;
float4	surface_diffuse_colour;
float4	surface_specular_colour;
float4	surface_emissive_colour;
float4	derived_scene_colour;
float	surface_shininess;
float4	light_attenuation0;
float4	derived_light_diffuse1;
float4	derived_light_diffuse2;
sampler2D	gTextureSampler0 : register(s0);
float4	pssm_split_points3;
sampler2D	shadow_map2 : register(s2);
float4	inv_shadow_texture_size4;
sampler2D	shadow_map3 : register(s3);
float4	inv_shadow_texture_size5;
sampler2D	shadow_map4 : register(s4);
float4	inv_shadow_texture_size6;

//-----------------------------------------------------------------------------
// Function Name: main
// Function Desc: Pixel Program Entry point
//-----------------------------------------------------------------------------
void main
	(
	 in float2	iTexcoord2_0 : TEXCOORD0, 
	 in float3	iTexcoord3_1 : TEXCOORD1, 
	 in float3	iTexcoord3_2 : TEXCOORD2, 
	 in float	iTexcoord1_3 : TEXCOORD3, 
	 in float4	iTexcoord4_4 : TEXCOORD4, 
	 in float4	iTexcoord4_5 : TEXCOORD5, 
	 in float4	iTexcoord4_6 : TEXCOORD6, 
	 out float4	oColor_0 : COLOR
	)
{
	float4	lLocalParam_0;
	float4	lLocalParam_1;
	float3	lLocalParam_2;
	float4	lNormalMapDiffuse;
	float4	texel;
	float4	source1;
	float4	source2;
	float	lShadowFactor;

	FFP_Construct(1.0, 1.0, 1.0, 1.0, lLocalParam_0);

	FFP_Construct(0.0, 0.0, 0.0, 0.0, lLocalParam_1);

	FFP_Assign(lLocalParam_0, oColor_0);

	SGX_FetchNormal(gNormalMapSampler1, iTexcoord2_0, lLocalParam_2);

	FFP_Assign(derived_scene_colour, lNormalMapDiffuse);

	SGX_Light_Point_Diffuse(lLocalParam_2, iTexcoord3_1.xyz, light_attenuation0, derived_light_diffuse1.xyz, lNormalMapDiffuse.xyz, lNormalMapDiffuse.xyz);

	SGX_Light_Directional_Diffuse(lLocalParam_2, iTexcoord3_2.xyz, derived_light_diffuse2.xyz, lNormalMapDiffuse.xyz, lNormalMapDiffuse.xyz);

	FFP_Assign(lNormalMapDiffuse, lLocalParam_0);

	FFP_Assign(lLocalParam_0, oColor_0);

	SGX_ComputeShadowFactor_PSSM3(iTexcoord1_3, pssm_split_points3, iTexcoord4_4, iTexcoord4_5, iTexcoord4_6, shadow_map2, shadow_map3, shadow_map4, inv_shadow_texture_size4, inv_shadow_texture_size5, inv_shadow_texture_size6, lShadowFactor);

	SGX_ApplyShadowFactor_Diffuse(derived_scene_colour, lLocalParam_0, lShadowFactor, lLocalParam_0);

	SGX_ModulateScalar(lShadowFactor, lLocalParam_1, lLocalParam_1);

	FFP_Assign(lLocalParam_0, oColor_0);

	FFP_SampleTexture(gTextureSampler0, iTexcoord2_0, texel);

	FFP_Assign(texel, source1);

	FFP_Assign(lLocalParam_0, source2);

	FFP_Modulate(source1.xyz, source2.xyz, oColor_0.xyz);

	FFP_Construct(0.0, source1);

	FFP_Assign(lLocalParam_0, source2);

	FFP_Assign(source1.w, oColor_0.w);

	FFP_Add(oColor_0.xyz, lLocalParam_1.xyz, oColor_0.xyz);
}

